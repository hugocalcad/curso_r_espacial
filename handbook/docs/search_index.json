[
["index.html", "Manual de R y Manejo Espacial 1 Manejo Espacial utilizando R", " Manual de R y Manejo Espacial Victor Chaly Miguel Juanca 1 Manejo Espacial utilizando R Curso realizado para manejar R con datos espaciales….. "],
["capitulo-1-introduccion-al-analisis-espacial-utilizando-r.html", "2 CAPÍTULO 1: Introducción al análisis espacial utilizando R 2.1 Instalación de R y RStudio 2.2 Introducción a la programación", " 2 CAPÍTULO 1: Introducción al análisis espacial utilizando R 2.1 Instalación de R y RStudio R, también conocido como “GNU S”, es un entorno y un lenguaje para el analisis estadístico y la generación de gráficos. R es un lenguage derivado del programa S, desarrollado en los Laboratorios Bell por John Chambers (Richard A. Becker, n.d.). R provee un acceso relativamente sencillo a una amplia variedad de técnicas estadísticas y graficas. Adicionalmente, R constituye un lenguaje de programación completo con el que añadir nuevas técnicas mediante la definición de funciones. “S ha modificado para siempre la forma en la que las personas analizan, visualizan y manipulan los datos” (Association of Computer Machinery Software System Award 1998 a John Chambers). Actualmente, S y R son los dos lenguajes más utilizados en investigación en estadística. Los grandes atractivos de R/S son: La capacidad de combinar, sin fisuras, análisis “preempaquetados” (ej., una regresión logística) con análisis ad-hoc, específicos para una situación: capacidad de manipular y modificar datos y funciones. Los gráficos de alta calidad: visualización de datos y producción de gráficos para papers. La comunidad de R es muy dinámica, con gran crecimiento del número de paquetes, e integrada por estadísticos de gran renombre (ej., J. Chambers, L. Terney, B. Ripley, D. Bates, etc.). Hay extensiones específicas a nuevas ´áreas como bioinformática, geoestadística y modelos gráficos. Es un lenguaje orientado a objetos. 2.1.1 Obtención e instalación de R / Rstudio Depende del sistema operativo, pero todo se puede encontrar en: http://cran.es.r-project.org/bin Windows: se puede obtener un ejecutable desde http://cran.es.r-project.org/bin/windows/base por ejemplo la versión de 32 bits R-2.4.1-win32.exe Al ejecutar el archivo se instalará el sistema base y los paquetes recomendados. GNU/Linux: (dos opciones) Obtener el R-x.y.z.tar.gz y compilar desde las fuentes. También bajar los paquetes adicionales e instalarlos. (Buena forma de comprobar que el sistema tiene development tools). Obtener binarios (ej., *.deb para Debian, *.rpm para RedHat, SuSE, Mandrake) 2.1.2 RSTUDIO Es una poderosa herramienta de desarrollo integrado un ambiente de desarrollo integrado, donde se puede desarrollar los diferentes proyectos que se aborden utilizando el leguaje R. Se puede descargar la última versión del programa desde: https://www.rstudio.com/ 2.1.2.1 Ambiente de Desarrollo Image 2.2 Introducción a la programación 2.2.1 Hola Mundo R Utilizamos la función print() para desplegar información en la pantalla ##Hola Mundo print(&quot;Hola Mundo&quot;) ## [1] &quot;Hola Mundo&quot; print(paste(&#39;Hola,&#39;, &#39;como&#39;, &#39;estas?&#39;)) ## [1] &quot;Hola, como estas?&quot; 2.2.2 Calculadora R puede ser utilizado como calculadoradesde la consola, tiene diversas funciones como ser sqrt (raiz cuadrada), pi (número pi), sin (la función seno), y muchos otros. Aca se puede encontrar una lista de algunos de ellos https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/math. #Operaciones básicas 2+2/2 ## [1] 3 #utilizando la funcion raiz cuadrada sqrt(9)/3 ## [1] 1 #el numero pi pi ## [1] 3.141593 #utilizando la función seno sin(23) ## [1] -0.8462204 2.2.2.1 Vectores Uno de los elementon básicos con los que se trabaj en R son los vectores. Un vector es una secuencia de datos de algún elemento básico. # Números c(1,2,3,4,5) ## [1] 1 2 3 4 5 #lógicos c(T,F,T,T,T) ## [1] TRUE FALSE TRUE TRUE TRUE #cadenas v &lt;- c(&quot;Hola&quot;, &quot;Como&quot;, &quot;estas&quot;) Para acceder a los datos se utiliza los corchetes [] con el número en la posición del vector print(v[1]) ## [1] &quot;Hola&quot; 2.2.2.2 Matrices Una Matriz es un arreglo bidimensional en R se utiliza la funcion matrix(). m &lt;- matrix( c(1,2,3,4,5,6,7,8,9), #Elementos de la matriz nrow = 3, #Número de filas ncol = 3, #Número de columnas byrow = T #Llenar por filas ) print(m) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 Al igual que en los vectores se puede acceder las mismos utilizando los corchetes [row,col] colocando primero la posición de la fila seguido de la posición de columna. Tanto en vectores como en matrices es posible realizar operaciones entre ellos es decir suma, producto, producto escalar y otros tanto con vectores y matrices. ####Listas Las listas son vectores(arreglos) genéricos que puede contener cualquier tipo de elemento, y para crear un elemento tipo lista utilizamos la funcion list(). n = c(2, 3, 5) s = c(&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;) b = c(TRUE, FALSE, TRUE, FALSE, FALSE) x = list(n, s, b, 3) # x contains copies of n, s, b Al igual que en los vectores para acceder a los elementos, se utiliza los corchetes [] y te retorna el elemento de la posición. print(x[1]) ## [[1]] ## [1] 2 3 5 2.2.2.3 Data Frames Son los elementos masutilizados al momento de realizar operaciones en el trabajo con R, un Data Frame es una tabla donde cada columna es representada por un vector, basicamnete seria una lista de vectores de igual tamaño. Para definir un Data Frame utilizamos la función data.frame(). n &lt;- c(2, 3, 5) s = c(&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;) b &lt;- c(TRUE, FALSE, TRUE) df &lt;- data.frame(n, s, b) print(df) ## n s b ## 1 2 aa TRUE ## 2 3 bb FALSE ## 3 5 cc TRUE Al igual que en las listas se puede acceder a cada vector y elemento utilizando los corchetes y de diferentes formas. #Accedemos al primera columna y no los devuelve con un sub data frame df[1] ## n ## 1 2 ## 2 3 ## 3 5 #Accedemos ala primera columna pero nos devuelve un vector df[[1]] ## [1] 2 3 5 #Accedemos al elemento en la columna 2 de la fila 1 df[1,2] ## [1] aa ## Levels: aa bb cc #Accedemos a la primera fila con todos los elementos de cada vector como un data frame df[1,] ## n s b ## 1 2 aa TRUE Otro aspecto importante de los data frame son los nombres de las columnas y para poder ver y asignar se utliza la función names(). #Ver nombres de las columnas names(df) ## [1] &quot;n&quot; &quot;s&quot; &quot;b&quot; #Asignar nuevos nombres names(df) &lt;- c(&quot;col1&quot;,&quot;col2&quot;, &quot;col3&quot;) #Ver columna 1 df$col1 ## [1] 2 3 5 Para agregar una columna al data frame se utiliza el comodin $ despues del data frame. df$col4 &lt;- c(12.3, 15.8, 9.5) df ## col1 col2 col3 col4 ## 1 2 aa TRUE 12.3 ## 2 3 bb FALSE 15.8 ## 3 5 cc TRUE 9.5 Para seleccionar de un conjunto de datos del daa frame se utiliza la función subset() donde se coloca como primer argumento el data frame original y como segundo argumento es un operador lógico con la condición que debe cumplir para la selección. df2 &lt;- subset(df, subset = col3 == T) df2 ## col1 col2 col3 col4 ## 1 2 aa TRUE 12.3 ## 3 5 cc TRUE 9.5 Para ver mas ejemplos de tipos de datos puedes ver http://www.r-tutor.com/r-introduction 2.2.2.4 Lectura de archivos Existen varios métodos para cargar diferentes tipos de archivos como ser: excel .xls .xlsx archivo separado por comas .csv, incluso archivos de matlab u otros paquetes estadísticos. Para el curso veremos apertura de archivos en formato .xls para este proposito utilizaremos el paquete readxl. install.packages(&#39;readxl&#39;) ## Installing package into &#39;C:/Users/Huguito/Documents/R/win-library/3.5&#39; ## (as &#39;lib&#39; is unspecified) ## package &#39;readxl&#39; successfully unpacked and MD5 sums checked ## ## The downloaded binary packages are in ## C:\\Users\\Huguito\\AppData\\Local\\Temp\\RtmpiWgpC7\\downloaded_packages library(readxl) ## Warning: package &#39;readxl&#39; was built under R version 3.5.3 #apuntamos al archivos de ejemplo file_xls &lt;- readxl_example(&#39;clippy.xls&#39;) df &lt;- read_xls(file_xls) df ## # A tibble: 4 x 2 ## name value ## &lt;chr&gt; &lt;chr&gt; ## 1 Name Clippy ## 2 Species paperclip ## 3 Approx date of death 39083 ## 4 Weight in grams 0.90000000000000002 2.2.3 Manejo de archivos Cuando trabajamos con varios archivos es mejor trabajar con distintas funciones que nos devuelvan un listado de los mismos y podamos trabajar en bloque y asi automatizar los procesos. Una manera de trabajar es utilizando la funcion list.files(), aca también es bueno conocer llo que son las expresiones regulares, aca utilizaremos solo la expresion .ext$ donde ext es la extensión de los archivosque listaremos. ##Listar archivos en el directorio de trabajo list.files() ## [1] &quot;_bookdown.yml&quot; ## [2] &quot;1_1_Introduccion.rmd&quot; ## [3] &quot;2_Visualizacion_vector_raster.rmd&quot; ## [4] &quot;assets&quot; ## [5] &quot;biblio.bib&quot; ## [6] &quot;curso_r_espacial.Rmd&quot; ## [7] &quot;docs&quot; ## [8] &quot;index.rmd&quot; ## [9] &quot;packages.bib&quot; ## [10] &quot;style.css&quot; #Sintaxis utilizando algún carpetadentro nuestro ordenador #list.files (path = &quot;C:/Folder/Subfolder1/Subfolder2&quot;) #list files in a browsed folder list.files(path = choose.dir()) ## character(0) #listar todos los archivos incluso en subcarpetas recursivamente list.files(recursive = TRUE) ## [1] &quot;_bookdown.yml&quot; ## [2] &quot;1_1_Introduccion.rmd&quot; ## [3] &quot;2_Visualizacion_vector_raster.rmd&quot; ## [4] &quot;assets/1_rstudio_ambiente.png&quot; ## [5] &quot;biblio.bib&quot; ## [6] &quot;curso_r_espacial.Rmd&quot; ## [7] &quot;docs/assets/1_rstudio_ambiente.png&quot; ## [8] &quot;docs/capitulo-1-introduccion-al-analisis-espacial-utilizando-r.html&quot; ## [9] &quot;docs/index.html&quot; ## [10] &quot;docs/libs/gitbook-2.6.7/css/fontawesome/fontawesome-webfont.ttf&quot; ## [11] &quot;docs/libs/gitbook-2.6.7/css/plugin-bookdown.css&quot; ## [12] &quot;docs/libs/gitbook-2.6.7/css/plugin-fontsettings.css&quot; ## [13] &quot;docs/libs/gitbook-2.6.7/css/plugin-highlight.css&quot; ## [14] &quot;docs/libs/gitbook-2.6.7/css/plugin-search.css&quot; ## [15] &quot;docs/libs/gitbook-2.6.7/css/plugin-table.css&quot; ## [16] &quot;docs/libs/gitbook-2.6.7/css/style.css&quot; ## [17] &quot;docs/libs/gitbook-2.6.7/js/app.min.js&quot; ## [18] &quot;docs/libs/gitbook-2.6.7/js/jquery.highlight.js&quot; ## [19] &quot;docs/libs/gitbook-2.6.7/js/lunr.js&quot; ## [20] &quot;docs/libs/gitbook-2.6.7/js/plugin-bookdown.js&quot; ## [21] &quot;docs/libs/gitbook-2.6.7/js/plugin-fontsettings.js&quot; ## [22] &quot;docs/libs/gitbook-2.6.7/js/plugin-search.js&quot; ## [23] &quot;docs/libs/gitbook-2.6.7/js/plugin-sharing.js&quot; ## [24] &quot;docs/libs/jquery-2.2.3/jquery.min.js&quot; ## [25] &quot;docs/search_index.json&quot; ## [26] &quot;docs/visualizando-datos-en-formato-vector-y-raster-en-r.html&quot; ## [27] &quot;index.rmd&quot; ## [28] &quot;packages.bib&quot; ## [29] &quot;style.css&quot; #Listar con la ruta completa (path and file name) de cada archivo list.files(full.name = TRUE) ## [1] &quot;./_bookdown.yml&quot; ## [2] &quot;./1_1_Introduccion.rmd&quot; ## [3] &quot;./2_Visualizacion_vector_raster.rmd&quot; ## [4] &quot;./assets&quot; ## [5] &quot;./biblio.bib&quot; ## [6] &quot;./curso_r_espacial.Rmd&quot; ## [7] &quot;./docs&quot; ## [8] &quot;./index.rmd&quot; ## [9] &quot;./packages.bib&quot; ## [10] &quot;./style.css&quot; #Listar archivos que contengan la palabra &quot;Product&quot; list.files(pattern = &quot;Product&quot;) ## character(0) #Listar archivos con la extension csv (Aca sepuede colocar .shp, .tif) list.files (pattern = &quot;.csv$&quot;) ## character(0) #listar archivos con extension shp en nuestra carpeta de trabajo list.files(path = &quot;../recursos/shps&quot;,pattern = &quot;.shp$&quot;) ## [1] &quot;aeropuertos_bolivia.shp&quot; &quot;Departamentos_Bolivia.shp&quot; ## [3] &quot;DUCTOS.shp&quot; &quot;POBLACIONES.shp&quot; Los siguientes enlaces se encuentra información de expresiones regulares http://rpubs.com/ydmarinb/429756, y sobre manejo de archivos https://rpubs.com/daniballari/intro_espaciotrabajo_archivos. References "],
["visualizando-datos-en-formato-vector-y-raster-en-r.html", "3 Visualizando datos en formato vector y raster en R 3.1 Visualización de datos espaciales en R: Vector vs. Raster (Paquete sf, raster, plot).", " 3 Visualizando datos en formato vector y raster en R 3.1 Visualización de datos espaciales en R: Vector vs. Raster (Paquete sf, raster, plot). En R existe una variedad de paquetes que te puedn ayudar a vizualizar y tabajar con datos espaciales, en el presente capítulo analizaremos los paquetes sf para manejo de datos espaciales y raster para manejos raster, y su vizualización básica con la función plot. 3.1.1 Instalacion de paquetes Los paquetes sf y raster se encuentra en el repositorio oficial de R: el paquete sf que se utiliza para manejar simples features, una forma estandarizada para utilizar datos/objetos del tipo vector, utiliza los estandares GDAL para lectura y escritura de datos, GEOS geométricas y PROJ para proyecciones y transformación de datos; el paquete raster permite la lectura, esccritura admás de poder realizar análisi y modelados en datos cuadriculaos (imágenes raster). Para instalación de paquete oficiales o que se encuentren dentro del repositorio oficial se utiliza la función install.packages(). if(!require(&quot;sf&quot;)) install.packages(&#39;sf&#39;) if(!require(&#39;raster&#39;)) install.packages(&#39;raster&#39;) 3.1.2 Abrir archivos vectoriales y su visualización Los archivos vectoriales uno de los mas utilizados son los archivos en formato .shp, que son archivos de ESRI, los modelos vectoriales almacenan 3 tipos de fromas geemétricas que son: punto, linea y poligono. En R existen diversas formas de abrir este tipo archivos, se puede utilizar otros paquetes como ser rgdal o sp. En el paquete sf la funcion st_read() permite la lectura de este tipos de archivos solo hay que colocar la ruta de nuestro archivo. #listamos los archivos con extension .shp shape_files &lt;- list.files(&#39;../recursos/shps&#39;, full.names = T, pattern = &#39;.shp$&#39;) shape_files ## [1] &quot;../recursos/shps/aeropuertos_bolivia.shp&quot; ## [2] &quot;../recursos/shps/Departamentos_Bolivia.shp&quot; ## [3] &quot;../recursos/shps/DUCTOS.shp&quot; ## [4] &quot;../recursos/shps/POBLACIONES.shp&quot; #abrimos el primer elemento que son los departamentos de Bolivia sf_dep &lt;- st_read(shape_files[2], stringsAsFactors = F) ## Reading layer `Departamentos_Bolivia&#39; from data source `D:\\VC2019\\TRABAJO\\UMSA\\geografia\\curso\\curso_r_espacial\\recursos\\shps\\Departamentos_Bolivia.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 14 features and 6 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -69.64483 ymin: -22.90657 xmax: -57.45443 ymax: -9.669633 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs Se carga un objeto que contiene información geográfica como ser: el tipo de vector, la extension geográfica y en que proyeccion esta. Además se carga todos los datos adjuntos y se crea una columna llamadad geometry donde esta cargado la geometria que es donde esta ubicada espacialmente. Para visualizar utilizaremos la función plot que es la que esta por defecto en el R. plot(sf_dep) "]
]
