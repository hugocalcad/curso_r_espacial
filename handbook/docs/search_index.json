[
["index.html", "Manual de R y Manejo Espacial 1 Manejo Espacial utilizando R ({#introduction .unnumbered})", " Manual de R y Manejo Espacial Victor Chaly Miguel Juanca 1 Manejo Espacial utilizando R ({#introduction .unnumbered}) Curso realizado para manejar R con datos espaciales….. "],
["capitulo-1-introduccion-al-analisis-espacial-utilizando-r.html", "2 CAPÍTULO 1: Introducción al análisis espacial utilizando R 2.1 Instalación de R y RStudio 2.2 Introducción a la programación", " 2 CAPÍTULO 1: Introducción al análisis espacial utilizando R 2.1 Instalación de R y RStudio R, también conocido como “GNU S”, es un entorno y un lenguaje para el analisis estadístico y la generación de gráficos. R es un lenguage derivado del programa S, desarrollado en los Laboratorios Bell por John Chambers (Richard A. Becker, n.d.). R provee un acceso relativamente sencillo a una amplia variedad de técnicas estadísticas y graficas. Adicionalmente, R constituye un lenguaje de programación completo con el que añadir nuevas técnicas mediante la definición de funciones. “S ha modificado para siempre la forma en la que las personas analizan, visualizan y manipulan los datos” (Association of Computer Machinery Software System Award 1998 a John Chambers). Actualmente, S y R son los dos lenguajes más utilizados en investigación en estadística. Los grandes atractivos de R/S son: La capacidad de combinar, sin fisuras, análisis “preempaquetados” (ej., una regresión logística) con análisis ad-hoc, específicos para una situación: capacidad de manipular y modificar datos y funciones. Los gráficos de alta calidad: visualización de datos y producción de gráficos para papers. La comunidad de R es muy dinámica, con gran crecimiento del número de paquetes, e integrada por estadísticos de gran renombre (ej., J. Chambers, L. Terney, B. Ripley, D. Bates, etc.). Hay extensiones específicas a nuevas ´áreas como bioinformática, geoestadística y modelos gráficos. Es un lenguaje orientado a objetos. 2.1.1 Obtención e instalación de R / Rstudio Depende del sistema operativo, pero todo se puede encontrar en: http://cran.es.r-project.org/bin Windows: se puede obtener un ejecutable desde http://cran.es.r-project.org/bin/windows/base por ejemplo la versión de 32 bits R-2.4.1-win32.exe Al ejecutar el archivo se instalará el sistema base y los paquetes recomendados. GNU/Linux: (dos opciones) Obtener el R-x.y.z.tar.gz y compilar desde las fuentes. También bajar los paquetes adicionales e instalarlos. (Buena forma de comprobar que el sistema tiene development tools). Obtener binarios (ej., *.deb para Debian, *.rpm para RedHat, SuSE, Mandrake) 2.1.2 RSTUDIO Es una poderosa herramienta de desarrollo integrado un ambiente de desarrollo integrado, donde se puede desarrollar los diferentes proyectos que se aborden utilizando el leguaje R. Se puede descargar la última versión del programa desde: https://www.rstudio.com/ 2.1.2.1 Ambiente de Desarrollo Image 2.2 Introducción a la programación 2.2.1 Hola Mundo R Utilizamos la función print() para desplegar información en la pantalla ##Hola Mundo print(&quot;Hola Mundo&quot;) ## [1] &quot;Hola Mundo&quot; print(paste(&#39;Hola,&#39;, &#39;como&#39;, &#39;estas?&#39;)) ## [1] &quot;Hola, como estas?&quot; 2.2.2 Calculadora R puede ser utilizado como calculadoradesde la consola, tiene diversas funciones como ser sqrt (raiz cuadrada), pi (número pi), sin (la función seno), y muchos otros. Aca se puede encontrar una lista de algunos de ellos https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/math. #Operaciones básicas 2+2/2 ## [1] 3 #utilizando la funcion raiz cuadrada sqrt(9)/3 ## [1] 1 #el numero pi pi ## [1] 3.141593 #utilizando la función seno sin(23) ## [1] -0.8462204 2.2.2.1 Vectores Uno de los elementon básicos con los que se trabaj en R son los vectores. Un vector es una secuencia de datos de algún elemento básico. # Números c(1,2,3,4,5) ## [1] 1 2 3 4 5 #lógicos c(T,F,T,T,T) ## [1] TRUE FALSE TRUE TRUE TRUE #cadenas v &lt;- c(&quot;Hola&quot;, &quot;Como&quot;, &quot;estas&quot;) Para acceder a los datos se utiliza los corchetes [] con el número en la posición del vector print(v[1]) ## [1] &quot;Hola&quot; 2.2.2.2 Matrices Una Matriz es un arreglo bidimensional en R se utiliza la funcion matrix(). m &lt;- matrix( c(1,2,3,4,5,6,7,8,9), #Elementos de la matriz nrow = 3, #Número de filas ncol = 3, #Número de columnas byrow = T #Llenar por filas ) print(m) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 Al igual que en los vectores se puede acceder las mismos utilizando los corchetes [row,col] colocando primero la posición de la fila seguido de la posición de columna. Tanto en vectores como en matrices es posible realizar operaciones entre ellos es decir suma, producto, producto escalar y otros tanto con vectores y matrices. ####Listas Las listas son vectores(arreglos) genéricos que puede contener cualquier tipo de elemento, y para crear un elemento tipo lista utilizamos la funcion list(). n = c(2, 3, 5) s = c(&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;) b = c(TRUE, FALSE, TRUE, FALSE, FALSE) x = list(n, s, b, 3) # x contains copies of n, s, b Al igual que en los vectores para acceder a los elementos, se utiliza los corchetes [] y te retorna el elemento de la posición. print(x[1]) ## [[1]] ## [1] 2 3 5 2.2.2.3 Data Frames Son los elementos masutilizados al momento de realizar operaciones en el trabajo con R, un Data Frame es una tabla donde cada columna es representada por un vector, basicamnete seria una lista de vectores de igual tamaño. Para definir un Data Frame utilizamos la función data.frame(). n &lt;- c(2, 3, 5) s = c(&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;) b &lt;- c(TRUE, FALSE, TRUE) df &lt;- data.frame(n, s, b) print(df) ## n s b ## 1 2 aa TRUE ## 2 3 bb FALSE ## 3 5 cc TRUE Al igual que en las listas se puede acceder a cada vector y elemento utilizando los corchetes y de diferentes formas. #Accedemos al primera columna y no los devuelve con un sub data frame df[1] ## n ## 1 2 ## 2 3 ## 3 5 #Accedemos ala primera columna pero nos devuelve un vector df[[1]] ## [1] 2 3 5 #Accedemos al elemento en la columna 2 de la fila 1 df[1,2] ## [1] aa ## Levels: aa bb cc #Accedemos a la primera fila con todos los elementos de cada vector como un data frame df[1,] ## n s b ## 1 2 aa TRUE Otro aspecto importante de los data frame son los nombres de las columnas y para poder ver y asignar se utliza la función names(). #Ver nombres de las columnas names(df) ## [1] &quot;n&quot; &quot;s&quot; &quot;b&quot; #Asignar nuevos nombres names(df) &lt;- c(&quot;col1&quot;,&quot;col2&quot;, &quot;col3&quot;) #Ver columna 1 df$col1 ## [1] 2 3 5 Para agregar una columna al data frame se utiliza el comodin $ despues del data frame. df$col4 &lt;- c(12.3, 15.8, 9.5) df ## col1 col2 col3 col4 ## 1 2 aa TRUE 12.3 ## 2 3 bb FALSE 15.8 ## 3 5 cc TRUE 9.5 Para seleccionar de un conjunto de datos del daa frame se utiliza la función subset() donde se coloca como primer argumento el data frame original y como segundo argumento es un operador lógico con la condición que debe cumplir para la selección. df2 &lt;- subset(df, subset = col3 == T) df2 ## col1 col2 col3 col4 ## 1 2 aa TRUE 12.3 ## 3 5 cc TRUE 9.5 Para ver mas ejemplos de tipos de datos puedes ver http://www.r-tutor.com/r-introduction 2.2.2.4 Lectura de archivos Existen varios métodos para cargar diferentes tipos de archivos como ser: excel .xls .xlsx archivo separado por comas .csv, incluso archivos de matlab u otros paquetes estadísticos. Para el curso veremos apertura de archivos en formato .xls para este proposito utilizaremos el paquete readxl. if(!require(readxl)) install.packages(&#39;readxl&#39;) library(readxl) #apuntamos al archivos de ejemplo file_xls &lt;- readxl_example(&#39;clippy.xls&#39;) df &lt;- read_xls(file_xls) df ## # A tibble: 4 x 2 ## name value ## &lt;chr&gt; &lt;chr&gt; ## 1 Name Clippy ## 2 Species paperclip ## 3 Approx date of death 39083 ## 4 Weight in grams 0.90000000000000002 2.2.3 Manejo de archivos Cuando trabajamos con varios archivos es mejor trabajar con distintas funciones que nos devuelvan un listado de los mismos y podamos trabajar en bloque y asi automatizar los procesos. Una manera de trabajar es utilizando la funcion list.files(), aca también es bueno conocer llo que son las expresiones regulares, aca utilizaremos solo la expresion .ext$ donde ext es la extensión de los archivosque listaremos. ##Listar archivos en el directorio de trabajo list.files() ## [1] &quot;_bookdown.yml&quot; ## [2] &quot;1_1_Introduccion.rmd&quot; ## [3] &quot;2_Visualizacion_vector_raster.rmd&quot; ## [4] &quot;3_operaciones_atributos_espaciales.rmd&quot; ## [5] &quot;assets&quot; ## [6] &quot;biblio.bib&quot; ## [7] &quot;curso_r_espacial.Rmd&quot; ## [8] &quot;docs&quot; ## [9] &quot;index.rmd&quot; ## [10] &quot;packages.bib&quot; ## [11] &quot;style.css&quot; #Sintaxis utilizando algún carpetadentro nuestro ordenador #list.files (path = &quot;C:/Folder/Subfolder1/Subfolder2&quot;) #list files in a browsed folder list.files(path = choose.dir()) ## character(0) #listar todos los archivos incluso en subcarpetas recursivamente list.files(recursive = TRUE) ## [1] &quot;_bookdown.yml&quot; ## [2] &quot;1_1_Introduccion.rmd&quot; ## [3] &quot;2_Visualizacion_vector_raster.rmd&quot; ## [4] &quot;3_operaciones_atributos_espaciales.rmd&quot; ## [5] &quot;assets/1_rstudio_ambiente.png&quot; ## [6] &quot;biblio.bib&quot; ## [7] &quot;curso_r_espacial.Rmd&quot; ## [8] &quot;docs/assets/1_rstudio_ambiente.png&quot; ## [9] &quot;docs/capitulo-1-introduccion-al-analisis-espacial-utilizando-r.html&quot; ## [10] &quot;docs/curso_r_espacial_files/figure-html/unnamed-chunk-25-1.png&quot; ## [11] &quot;docs/index.html&quot; ## [12] &quot;docs/libs/gitbook-2.6.7/css/fontawesome/fontawesome-webfont.ttf&quot; ## [13] &quot;docs/libs/gitbook-2.6.7/css/plugin-bookdown.css&quot; ## [14] &quot;docs/libs/gitbook-2.6.7/css/plugin-fontsettings.css&quot; ## [15] &quot;docs/libs/gitbook-2.6.7/css/plugin-highlight.css&quot; ## [16] &quot;docs/libs/gitbook-2.6.7/css/plugin-search.css&quot; ## [17] &quot;docs/libs/gitbook-2.6.7/css/plugin-table.css&quot; ## [18] &quot;docs/libs/gitbook-2.6.7/css/style.css&quot; ## [19] &quot;docs/libs/gitbook-2.6.7/js/app.min.js&quot; ## [20] &quot;docs/libs/gitbook-2.6.7/js/jquery.highlight.js&quot; ## [21] &quot;docs/libs/gitbook-2.6.7/js/lunr.js&quot; ## [22] &quot;docs/libs/gitbook-2.6.7/js/plugin-bookdown.js&quot; ## [23] &quot;docs/libs/gitbook-2.6.7/js/plugin-fontsettings.js&quot; ## [24] &quot;docs/libs/gitbook-2.6.7/js/plugin-search.js&quot; ## [25] &quot;docs/libs/gitbook-2.6.7/js/plugin-sharing.js&quot; ## [26] &quot;docs/libs/jquery-2.2.3/jquery.min.js&quot; ## [27] &quot;docs/search_index.json&quot; ## [28] &quot;docs/visualizando-datos-en-formato-vector-y-raster-en-r.html&quot; ## [29] &quot;index.rmd&quot; ## [30] &quot;packages.bib&quot; ## [31] &quot;style.css&quot; #Listar con la ruta completa (path and file name) de cada archivo list.files(full.name = TRUE) ## [1] &quot;./_bookdown.yml&quot; ## [2] &quot;./1_1_Introduccion.rmd&quot; ## [3] &quot;./2_Visualizacion_vector_raster.rmd&quot; ## [4] &quot;./3_operaciones_atributos_espaciales.rmd&quot; ## [5] &quot;./assets&quot; ## [6] &quot;./biblio.bib&quot; ## [7] &quot;./curso_r_espacial.Rmd&quot; ## [8] &quot;./docs&quot; ## [9] &quot;./index.rmd&quot; ## [10] &quot;./packages.bib&quot; ## [11] &quot;./style.css&quot; #Listar archivos que contengan la palabra &quot;Product&quot; list.files(pattern = &quot;Product&quot;) ## character(0) #Listar archivos con la extension csv (Aca sepuede colocar .shp, .tif) list.files (pattern = &quot;.csv$&quot;) ## character(0) #listar archivos con extension shp en nuestra carpeta de trabajo list.files(path = &quot;../recursos/shps&quot;,pattern = &quot;.shp$&quot;) ## [1] &quot;aeropuertos_bolivia.shp&quot; &quot;Departamentos_Bolivia.shp&quot; ## [3] &quot;DUCTOS.shp&quot; &quot;POBLACIONES.shp&quot; Los siguientes enlaces se encuentra información de expresiones regulares http://rpubs.com/ydmarinb/429756, y sobre manejo de archivos https://rpubs.com/daniballari/intro_espaciotrabajo_archivos. References "],
["visualizando-datos-en-formato-vector-y-raster-en-r.html", "3 Visualizando datos en formato vector y raster en R 3.1 Instalación de paquetes 3.2 Cargar archivos vectoriales y su visualización 3.3 Cargando imagenes Raster 3.4 Introducción a visualizacion dinámica con leaflet", " 3 Visualizando datos en formato vector y raster en R En R existe una variedad de paquetes que te puedn ayudar a vizualizar y tabajar con datos espaciales, en el presente capítulo analizaremos los paquetes sf para manejo de datos espaciales y raster para manejos raster, y su vizualización básica con la función plot. 3.1 Instalación de paquetes Los paquetes sf y raster se encuentra en el repositorio oficial de R: el paquete sf que se utiliza para manejar simples features, una forma estandarizada para utilizar datos/objetos del tipo vector, utiliza los estandares GDAL para lectura y escritura de datos, GEOS geométricas y PROJ para proyecciones y transformación de datos; el paquete raster permite la lectura, esccritura admás de poder realizar análisi y modelados en datos cuadriculaos (imágenes raster). Para instalación de paquete oficiales o que se encuentren dentro del repositorio oficial se utiliza la función install.packages(). if(!require(&quot;sf&quot;)) install.packages(&#39;sf&#39;) if(!require(&#39;raster&#39;)) install.packages(&#39;raster&#39;) 3.2 Cargar archivos vectoriales y su visualización Los archivos vectoriales uno de los mas utilizados son los archivos en formato .shp, que son archivos de ESRI, los modelos vectoriales almacenan 3 tipos de fromas geemétricas que son: punto, linea y poligono. En R existen diversas formas de abrir este tipo archivos, se puede utilizar otros paquetes como ser rgdal o sp. En el paquete sf la funcion st_read() permite la lectura de este tipos de archivos solo hay que colocar la ruta de nuestro archivo. #listar los archivos con extension .shp shape_files &lt;- list.files(&#39;../recursos/shps&#39;, full.names = T, pattern = &#39;.shp$&#39;) shape_files ## [1] &quot;../recursos/shps/aeropuertos_bolivia.shp&quot; ## [2] &quot;../recursos/shps/Departamentos_Bolivia.shp&quot; ## [3] &quot;../recursos/shps/DUCTOS.shp&quot; ## [4] &quot;../recursos/shps/POBLACIONES.shp&quot; #Cargar el primer elemento que son los departamentos de Bolivia (Poligono) sf_dep &lt;- st_read(shape_files[2], stringsAsFactors = F) ## Reading layer `Departamentos_Bolivia&#39; from data source `D:\\VC2019\\TRABAJO\\UMSA\\geografia\\curso\\curso_r_espacial\\recursos\\shps\\Departamentos_Bolivia.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 14 features and 6 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -69.64483 ymin: -22.90657 xmax: -57.45443 ymax: -9.669633 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs #Cargar el segundo elemento que son los ductos de petroleo (lineas) sf_duc &lt;- st_read(shape_files[3], stringsAsFactors = F) ## Reading layer `DUCTOS&#39; from data source `D:\\VC2019\\TRABAJO\\UMSA\\geografia\\curso\\curso_r_espacial\\recursos\\shps\\DUCTOS.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 102 features and 25 fields ## geometry type: LINESTRING ## dimension: XYZ ## bbox: xmin: -70.32087 ymin: -22.03772 xmax: -57.74886 ymax: -16.30326 ## epsg (SRID): NA ## proj4string: +proj=longlat +ellps=intl +no_defs #Cargar el ercer elemento que son las poblaciones (puntos) sf_pob &lt;- st_read(shape_files[4], stringsAsFactors = F) ## Reading layer `POBLACIONES&#39; from data source `D:\\VC2019\\TRABAJO\\UMSA\\geografia\\curso\\curso_r_espacial\\recursos\\shps\\POBLACIONES.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 23891 features and 14 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: -69.60421 ymin: -22.85162 xmax: -57.56432 ymax: -9.678153 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs Se carga un objeto que contiene información geográfica como ser: el tipo de vector, la extension geográfica y en que proyeccion esta. Además se carga todos los datos adjuntos y se crea una columna llamadad geometry donde esta cargado la geometria que es donde esta ubicada espacialmente. 3.2.1 Cargar un archivo de texto con coordenadas Cuando tenemos un archivo que contiene las coordenadas recogidas en algun trabajo en R se utiliza la funcion st_as_sf(), aca se debe definir un objeto que contenga las coordenadas (debe contener la longitud y latitud), para cargar nuestros datos como un data frame se utiliza la función read_csv() del paquete base de R. #Leer los datos de nuestro archivo csv bol_aeropuertos &lt;- read.csv(&quot;../recursos/archivos/aeropuertos_bolivia.csv&quot;, stringsAsFactors = FALSE) #Ver la información que contiene head(bol_aeropuertos) ## id nombre ciudad pais iata_faa iaco latitude longitude ## 1 1 Bermejo Bermejo Bolivia BJO SLBJ -22.77334 -64.31288 ## 2 2 Jorge Wilsterman Cochabamba Bolivia CBB SLCB -17.42106 -66.17711 ## 3 3 Chimore Chapacura Bolivia SLCH -16.99002 -65.14153 ## 4 4 Heroes Del Acre Cobija Bolivia CIJ SLCO -11.04044 -68.78297 ## 5 5 El Alto Intl La Paz Bolivia LPB SLLP -16.51334 -68.19226 ## 6 6 Juan Mendoza Oruro Bolivia SLOR -17.96259 -67.07624 ## altitude zone dst ## 1 1250 -3 U ## 2 8360 -4 U ## 3 1000 -4 U ## 4 892 -4 U ## 5 13325 -4 U ## 6 12146 -4 U #Lo volvemos en un feature con la funcion st_as_sf con las columnas que definen la longitud y latitud sf_aer &lt;- st_as_sf(bol_aeropuertos, coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs=4326) ###Visualizacion Para visualizar utilizaremos la función plot que es la que esta por defecto en el R. plot(sf_dep) Con R facilmente podemos crear un mapa con la clasificación de un atributo de nuestro feature, para esto utilizamos los corchetes con el nombre del atributo. #Vemos un resumen del feature summary(sf_dep) ## gml_id OBJECTID ID COD_DEP ## Length:14 Min. : 1.00 Min. : 0.0 Length:14 ## Class :character 1st Qu.: 42.75 1st Qu.:174.2 Class :character ## Mode :character Median :143.00 Median :238.5 Mode :character ## Mean :163.36 Mean :276.9 ## 3rd Qu.:209.00 3rd Qu.:406.0 ## Max. :443.00 Max. :479.0 ## NOM_DEP DESCRIP geometry ## Length:14 Length:14 MULTIPOLYGON :14 ## Class :character Class :character epsg:4326 : 0 ## Mode :character Mode :character +proj=long...: 0 ## ## ## #Seleccionas la columna en este caso NOM_DEP plot(sf_dep[&#39;NOM_DEP&#39;]) Exite varios parametros que nos pueden ser de utilidad para presentar mapas en R a continuacion detallamos algunos: -col: permite definir la paleta de colores puede definirse por un número o colocar una paleta predefinida por el paquete principal como ser: rainbow, heat.colors, topo.colors, bpy.colors. -axes binario, por TRUE muestra los ejes. -add binario, por TRUE permite añadir un feature al mapa. Existen más parametros que pueden ser visualizados en al ayuda de R para esto se puede usar ?plot y seleccionar la función plot del paquete sf. Para añadir mas features en un solo mapa utilizaremos la funcion st_geometry dentro de plot para que nos muestre solo los objetos espaciales y no los discrimine por sus atributos. plot(st_geometry(sf_dep), col = sf.colors(9, categorical = TRUE), border = &#39;grey&#39;, axes = TRUE) plot(st_geometry(sf_duc), add = T) plot(st_geometry(sf_aer), pch = 3, col = &quot;red&quot;, add = T) 3.3 Cargando imagenes Raster Las imagenes raster vienen en varias tipo de formatos como ser .tif, .grd, .NFS y mchos otros. Para cargar un archivo utilizamos la funcion raster(), enviandole laruta donde se encuentra nuestra imagen raster, existen otros parametros como ser band que banda utilizaremos, layer que capa se cargara. # Listar todos nuestros archivos raster con extension tif raster_files &lt;- list.files(&#39;../recursos/raster&#39;, full.names = T, recursive = T, pattern = &#39;.tif$&#39;) #Cargar la imagen a nuestro espacio de trabajo ras_1 &lt;- raster(raster_files[1]) #Ver el objeto cargado ras_1 ## class : RasterLayer ## band : 1 (of 3 bands) ## dimensions : 531, 684, 363204 (nrow, ncol, ncell) ## resolution : 0.01098633, 0.01053534 (x, y) ## extent : -64.58862, -57.07397, -20.32536, -14.7311 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 ## source : D:/VC2019/TRABAJO/UMSA/geografia/curso/curso_r_espacial/recursos/raster/Santa_Cruz_2.tif ## names : Santa_Cruz_2 ## values : 0, 255 (min, max) Las imagenes raster son matrices que contienen celdas con valores númericos, podemos acceder a cualquier valor de nuestra imagen con los corchetes [filas, columna] indicando la posición en la matriz. #Mostrar la primera celda ras_1[1,1] ## ## 53 #Acceder al ultimo valor ras_1[ras_1@nrows,ras_1@ncols] ## ## 47 ###Visualización de imagenes raster Para visualizar nuestro objetos raster utilizamos la función plot. plot(ras_1) Como se obserav nos muestra los resultados de la imagen en una escala de verde a rojo, muchas imagenes de satelite constan de 3 bandas por ejemplo la imagen que utilizamos se ve asi: Image La función que utilizamos carga la primera banda, si queremos cargar todas nuestras bandas podemos utilizar cargarla una por una y luego unirla en pila de rasters utilizando la funcion stack() #cargar las demás bandas ras_2 &lt;-raster(raster_files[1], band = 2) ras_3 &lt;-raster(raster_files[1], band = 3) #Crear el stack ras_S &lt;- stack(ras_1,ras_2,ras_3) #Visuzaliando la imagen multibanda en formato RGB plotRGB(ras_S) 3.4 Introducción a visualizacion dinámica con leaflet Leaflet es una de las librerias mas popularespara realizar mpaas interactivos, R ofrece un paquete que permite visualizar nuestro mapas de manera dinamica con leaflet aca solo se muestra un ejemple si quiere saber mas puede ver https://rstudio.github.io/leaflet/. #Instalacion if(!require(leaflet)) install.packages(&#39;leaflet&#39;) library(leaflet) map &lt;- leaflet(sf_dep) %&gt;% addPolygons(color = &quot;#444444&quot;, weight = 1, smoothFactor = 0.5, opacity = 0.5, fillOpacity = 0.5, highlightOptions = highlightOptions(color = &quot;white&quot;, weight = 2, bringToFront = TRUE)) map %&gt;% addTiles() "],
["operaciones-con-atributos-espaciales-en-r.html", "4 Operaciones con atributos espaciales en R 4.1 Datos Vector", " 4 Operaciones con atributos espaciales en R 4.1 Datos Vector Utilizando los datos cargados anteriormente: shape_files &lt;- list.files(&#39;../recursos/shps&#39;, full.names = T, pattern = &#39;.shp$&#39;) sf_dep &lt;- st_read(shape_files[2], stringsAsFactors = F) sf_duc &lt;- st_read(shape_files[3], stringsAsFactors = F) sf_pob &lt;- st_read(shape_files[4], stringsAsFactors = F) Si observamos nuestro feauture que representa departamentos de Bolivia: as.data.frame(sf_dep) ## gml_id OBJECTID ID COD_DEP NOM_DEP DESCRIP ## 1 departamento1.1 408 261 8 BENI Departamento ## 2 departamento1.2 25 147 1 CHUQUISACA Departamento ## 3 departamento1.3 1 0 3 COCHABAMBA Departamento ## 4 departamento1.4 249 96 2 LA PAZ Departamento ## 5 departamento1.5 96 428 4 ORURO Departamento ## 6 departamento1.6 443 190 9 PANDO Departamento ## 7 departamento1.7 12 194 5 POTOSI Departamento ## 8 departamento1.8 157 169 7 SANTA CRUZ Departamento ## 9 departamento1.9 11 216 6 TARIJA Departamento ## 10 departamento1.10 209 406 0 Lago Uru Uru Lago ## 11 departamento1.11 209 406 0 Lago Poopo Lago ## 12 departamento1.12 209 406 0 Lag Titicaca Lago ## 13 departamento1.13 129 479 0 Salar Uyuni Salar ## 14 departamento1.14 129 479 0 Salar Coipasa Salar ## geometry ## 1 MULTIPOLYGON (((-63.38139 -... ## 2 MULTIPOLYGON (((-65.20002 -... ## 3 MULTIPOLYGON (((-66.33848 -... ## 4 MULTIPOLYGON (((-68.77752 -... ## 5 MULTIPOLYGON (((-67.52889 -... ## 6 MULTIPOLYGON (((-68.79815 -... ## 7 MULTIPOLYGON (((-67.11796 -... ## 8 MULTIPOLYGON (((-62.69866 -... ## 9 MULTIPOLYGON (((-64.25182 -... ## 10 MULTIPOLYGON (((-67.09132 -... ## 11 MULTIPOLYGON (((-67.05816 -... ## 12 MULTIPOLYGON (((-69.25588 -... ## 13 MULTIPOLYGON (((-67.48285 -... ## 14 MULTIPOLYGON (((-67.98348 -... Existen columnas que no snecesitan para trabajar los cuales son : gml_id, OBJECTID e ID, y tambien existen filas que no corresponden a los departamentos si a lagos y salares, para poder seleccionar tanto columnas datos como columnas existen varios métodos a continuacion se describen algunos: 4.1.1 Utilizando la funcion subset Se puede utilizar la función subset y una condición en la columna y/o columnas que se necesita hacer la selección. #Filtrar solo los departamentos sf_dep_fil &lt;- subset(sf_dep, DESCRIP == &quot;Departamento&quot;) #Verificar el filtrado as.data.frame(sf_dep_fil) ## gml_id OBJECTID ID COD_DEP NOM_DEP DESCRIP ## 1 departamento1.1 408 261 8 BENI Departamento ## 2 departamento1.2 25 147 1 CHUQUISACA Departamento ## 3 departamento1.3 1 0 3 COCHABAMBA Departamento ## 4 departamento1.4 249 96 2 LA PAZ Departamento ## 5 departamento1.5 96 428 4 ORURO Departamento ## 6 departamento1.6 443 190 9 PANDO Departamento ## 7 departamento1.7 12 194 5 POTOSI Departamento ## 8 departamento1.8 157 169 7 SANTA CRUZ Departamento ## 9 departamento1.9 11 216 6 TARIJA Departamento ## geometry ## 1 MULTIPOLYGON (((-63.38139 -... ## 2 MULTIPOLYGON (((-65.20002 -... ## 3 MULTIPOLYGON (((-66.33848 -... ## 4 MULTIPOLYGON (((-68.77752 -... ## 5 MULTIPOLYGON (((-67.52889 -... ## 6 MULTIPOLYGON (((-68.79815 -... ## 7 MULTIPOLYGON (((-67.11796 -... ## 8 MULTIPOLYGON (((-62.69866 -... ## 9 MULTIPOLYGON (((-64.25182 -... Como se puede observar selecciona solo aquellas filas que en la columna DESCRIP coincide con la cadena ‘Departamento’. utilizando la opcion select se seleccionar solo con las columnas que queremos trabajar: #Filtrar por departamentos con las columnas COD_DEP, NOMDEP y geometry sf_dep_fil &lt;- subset(sf_dep, DESCRIP == &quot;Departamento&quot;, select = c(COD_DEP, NOM_DEP, geometry)) #Verificar el filtrado as.data.frame(sf_dep_fil) ## COD_DEP NOM_DEP geometry ## 1 8 BENI MULTIPOLYGON (((-63.38139 -... ## 2 1 CHUQUISACA MULTIPOLYGON (((-65.20002 -... ## 3 3 COCHABAMBA MULTIPOLYGON (((-66.33848 -... ## 4 2 LA PAZ MULTIPOLYGON (((-68.77752 -... ## 5 4 ORURO MULTIPOLYGON (((-67.52889 -... ## 6 9 PANDO MULTIPOLYGON (((-68.79815 -... ## 7 5 POTOSI MULTIPOLYGON (((-67.11796 -... ## 8 7 SANTA CRUZ MULTIPOLYGON (((-62.69866 -... ## 9 6 TARIJA MULTIPOLYGON (((-64.25182 -... 4.1.2 Utilizando los corchetes Otra forma practica para hacer seleccion de nuestro datos es la utilizacion de indices dentro de los corchetes realizando las mismas operaciones pero con corchetes. #Filtrar solo los departamentos sf_dep_fil &lt;- sf_dep[sf_dep$DESCRIP == &quot;Departamento&quot;,] #Verificar el filtrado as.data.frame(sf_dep_fil) ## gml_id OBJECTID ID COD_DEP NOM_DEP DESCRIP ## 1 departamento1.1 408 261 8 BENI Departamento ## 2 departamento1.2 25 147 1 CHUQUISACA Departamento ## 3 departamento1.3 1 0 3 COCHABAMBA Departamento ## 4 departamento1.4 249 96 2 LA PAZ Departamento ## 5 departamento1.5 96 428 4 ORURO Departamento ## 6 departamento1.6 443 190 9 PANDO Departamento ## 7 departamento1.7 12 194 5 POTOSI Departamento ## 8 departamento1.8 157 169 7 SANTA CRUZ Departamento ## 9 departamento1.9 11 216 6 TARIJA Departamento ## geometry ## 1 MULTIPOLYGON (((-63.38139 -... ## 2 MULTIPOLYGON (((-65.20002 -... ## 3 MULTIPOLYGON (((-66.33848 -... ## 4 MULTIPOLYGON (((-68.77752 -... ## 5 MULTIPOLYGON (((-67.52889 -... ## 6 MULTIPOLYGON (((-68.79815 -... ## 7 MULTIPOLYGON (((-67.11796 -... ## 8 MULTIPOLYGON (((-62.69866 -... ## 9 MULTIPOLYGON (((-64.25182 -... Seleccionando las columnas #Filtrar las columnas con indices las posiciones que utilizamos son: # columnas 4,5 y 7 sf_dep_fil &lt;- sf_dep_fil[, c(4,5,7)] as.data.frame(sf_dep_fil) ## COD_DEP NOM_DEP geometry ## 1 8 BENI MULTIPOLYGON (((-63.38139 -... ## 2 1 CHUQUISACA MULTIPOLYGON (((-65.20002 -... ## 3 3 COCHABAMBA MULTIPOLYGON (((-66.33848 -... ## 4 2 LA PAZ MULTIPOLYGON (((-68.77752 -... ## 5 4 ORURO MULTIPOLYGON (((-67.52889 -... ## 6 9 PANDO MULTIPOLYGON (((-68.79815 -... ## 7 5 POTOSI MULTIPOLYGON (((-67.11796 -... ## 8 7 SANTA CRUZ MULTIPOLYGON (((-62.69866 -... ## 9 6 TARIJA MULTIPOLYGON (((-64.25182 -... 4.1.3 Utilizando el paquete dplyr El paquete dplyr ofrece varias funciones que nos ayuda a analizar y manipular nuestros datos,funciona bastante bien cuando trabajamos con una gran cantidad de datos, acontinuación mostramos como se intala. if(!require(dplyr)) install.packages(&#39;dplyr&#39;) library(dplyr) Utilizando los pipelines (%&gt;%) podemos ordenar nuestro código utilizando pirmero la funcion filter() que sirve para seleccionar las filas según uno o varios criterio similar a la funcion subset y posteriormente utilizamos la funcion select para seleccionar las columnas, aca no es necesario colocar la columna de geometria este se mantendra. #Utilizando las funciones con pipeline sf_dep_fil &lt;- sf_dep %&gt;% filter(DESCRIP == &quot;Departamento&quot;) %&gt;% select(NOM_DEP) #Mostrar el resultado as.data.frame(sf_dep_fil) ## NOM_DEP geometry ## 1 BENI MULTIPOLYGON (((-63.38139 -... ## 2 CHUQUISACA MULTIPOLYGON (((-65.20002 -... ## 3 COCHABAMBA MULTIPOLYGON (((-66.33848 -... ## 4 LA PAZ MULTIPOLYGON (((-68.77752 -... ## 5 ORURO MULTIPOLYGON (((-67.52889 -... ## 6 PANDO MULTIPOLYGON (((-68.79815 -... ## 7 POTOSI MULTIPOLYGON (((-67.11796 -... ## 8 SANTA CRUZ MULTIPOLYGON (((-62.69866 -... ## 9 TARIJA MULTIPOLYGON (((-64.25182 -... ##Raster Como hemos visto en el capitulo anterior para acceder a los datos de un raster solo es necesario utilizar losindices dentro los corchetes, ya que una imagen raster es una matriz ubicados espacialmente. Pero muchas veces necestamos extraer datos de ciertos punto o sectores por ejemplosi tuvieramos un raster de elevación y tenemos puntos de poblaciones y queremos saber a que altura se encuantran hay que extraer esto datos, y para esto tenemos la función extract del R. #Utilizando la capa con las 3 bandas y la capa de poblaciones extrraemos rasValue &lt;- extract(ras_S, sf_pob) #verificamos los datos con head y tail head(rasValue) ## Santa_Cruz_2.1 Santa_Cruz_2.2 Santa_Cruz_2.3 ## [1,] NA NA NA ## [2,] NA NA NA ## [3,] NA NA NA ## [4,] NA NA NA ## [5,] NA NA NA ## [6,] NA NA NA tail(rasValue) ## Santa_Cruz_2.1 Santa_Cruz_2.2 Santa_Cruz_2.3 ## [23886,] NA NA NA ## [23887,] NA NA NA ## [23888,] NA NA NA ## [23889,] NA NA NA ## [23890,] NA NA NA ## [23891,] NA NA NA Como se observa los datos aparecen con valores NA esto es debido a que nuestro raster ocupa solo el espacio de santa cruz y las poblaciones de toda bolivia podemos utilizar un filtro para dejar de lado los valores NA #Lo convertimos en un data frame rasValue &lt;- as.data.frame(rasValue) #Realisamos el filtro solo de la primera banda ya que se repetira en las demas rasValue %&gt;% filter(!is.na(rasValue$Santa_Cruz_2.1)) ## Santa_Cruz_2.1 Santa_Cruz_2.2 Santa_Cruz_2.3 ## 1 91 86 49 ## 2 56 67 32 ## 3 87 91 48 ## 4 74 83 53 ## 5 54 68 28 ## 6 63 78 42 ## 7 100 95 58 ## 8 55 67 37 ## 9 98 80 36 ## 10 116 97 55 ## 11 83 66 30 ## 12 111 102 60 ## 13 83 85 51 ## 14 58 65 31 ## 15 49 60 30 ## 16 126 111 80 ## 17 90 88 48 ## 18 64 71 33 ## 19 120 99 68 ## 20 57 73 30 ## 21 80 87 42 ## 22 84 89 53 ## 23 79 92 50 ## 24 66 74 28 ## 25 65 65 34 ## 26 52 52 22 ## 27 94 99 54 ## 28 130 118 80 ## 29 86 76 42 ## 30 82 83 39 ## 31 83 86 40 ## 32 69 80 40 ## 33 93 94 49 ## 34 88 91 45 ## 35 81 91 50 ## 36 95 85 50 ## 37 94 95 56 ## 38 44 57 28 ## 39 45 60 29 ## 40 47 63 29 ## 41 49 65 32 ## 42 58 71 36 ## 43 144 132 93 ## 44 49 65 29 ## 45 68 78 42 ## 46 117 110 68 ## 47 106 107 64 ## 48 75 76 39 ## 49 70 81 40 ## 50 108 113 73 ## 51 53 64 30 ## 52 55 65 32 ## 53 54 64 29 ## 54 54 63 32 ## 55 55 65 28 ## 56 51 62 32 ## 57 85 92 49 ## 58 96 103 60 ## 59 107 106 63 ## 60 45 56 26 ## 61 48 58 21 ## 62 86 86 49 ## 63 93 89 52 ## 64 47 59 19 ## 65 74 80 43 ## 66 38 53 20 ## 67 80 87 47 ## 68 39 54 25 ## 69 37 52 19 ## 70 27 48 15 ## 71 127 106 75 ## 72 87 85 48 ## 73 101 96 55 ## 74 84 82 42 ## 75 68 76 37 ## 76 74 72 34 ## 77 83 77 40 ## 78 86 70 29 ## 79 108 87 51 ## 80 74 67 25 ## 81 79 68 30 ## 82 85 77 34 ## 83 75 67 29 ## 84 95 76 43 ## 85 69 66 26 ## 86 64 61 18 ## 87 98 84 48 ## 88 99 94 53 ## 89 93 89 52 ## 90 93 88 51 ## 91 84 81 41 ## 92 63 75 36 ## 93 82 67 29 ## 94 65 82 41 ## 95 92 80 43 ## 96 86 68 39 ## 97 74 79 42 ## 98 95 77 40 ## 99 33 50 14 ## 100 71 78 46 ## 101 47 54 20 ## 102 44 65 24 ## 103 80 77 37 ## 104 74 68 37 ## 105 72 68 31 ## 106 59 65 31 ## 107 113 105 68 ## 108 70 72 35 ## 109 49 64 28 ## 110 92 93 54 ## 111 79 86 43 ## 112 68 79 40 ## 113 83 88 49 ## 114 77 84 41 ## 115 90 90 53 ## 116 87 99 54 ## 117 77 93 47 ## 118 55 66 27 ## 119 46 56 22 ## 120 75 91 43 ## 121 47 52 22 ## 122 51 62 21 ## 123 66 71 38 ## 124 72 90 43 ## 125 69 76 33 ## 126 48 55 24 ## 127 82 93 52 ## 128 100 102 63 ## 129 58 67 34 ## 130 60 70 29 ## 131 93 99 62 ## 132 82 91 45 ## 133 62 65 31 ## 134 44 55 21 ## 135 60 70 29 ## 136 67 80 38 ## 137 73 82 37 ## 138 93 91 53 ## 139 71 79 39 ## 140 62 69 29 ## 141 56 70 36 ## 142 98 99 59 ## 143 77 82 43 ## 144 77 79 41 ## 145 58 55 20 ## 146 58 58 24 ## 147 64 66 36 ## 148 50 49 18 ## 149 68 58 25 ## 150 58 54 19 ## 151 41 45 10 ## 152 56 53 18 ## 153 66 63 28 ## 154 53 50 15 ## 155 44 55 22 ## 156 41 42 11 ## 157 74 62 25 ## 158 54 50 15 ## 159 65 54 14 ## 160 82 67 29 ## 161 40 49 18 ## 162 86 70 37 ## 163 65 59 21 ## 164 82 69 28 ## 165 62 49 11 ## 166 86 71 31 ## 167 50 45 12 ## 168 46 60 27 ## 169 43 59 32 ## 170 35 48 22 ## 171 48 57 28 ## 172 82 91 47 ## 173 79 95 49 ## 174 50 58 21 ## 175 92 90 53 ## 176 60 69 36 ## 177 48 62 29 ## 178 91 90 49 ## 179 96 97 56 ## 180 68 77 35 ## 181 80 86 47 ## 182 46 59 29 ## 183 71 78 46 ## 184 44 58 25 ## 185 56 69 37 ## 186 44 57 29 ## 187 57 66 30 ## 188 47 60 29 ## 189 102 99 66 ## 190 36 48 19 ## 191 44 53 21 ## 192 78 82 49 ## 193 84 76 38 ## 194 66 76 43 ## 195 59 65 34 ## 196 53 71 27 ## 197 59 73 31 ## 198 60 73 31 ## 199 90 85 39 ## 200 80 78 40 ## 201 88 89 50 ## 202 103 93 58 ## 203 42 58 29 ## 204 65 76 39 ## 205 40 54 19 ## 206 83 85 49 ## 207 77 84 48 ## 208 48 62 24 ## 209 74 82 44 ## 210 55 69 31 ## 211 54 64 29 ## 212 63 75 36 ## 213 57 72 36 ## 214 67 79 44 ## 215 52 75 40 ## 216 81 83 47 ## 217 80 84 52 ## 218 69 84 54 ## 219 112 108 61 ## 220 97 84 50 ## 221 115 110 69 ## 222 52 63 31 ## 223 63 72 37 ## 224 78 70 33 ## 225 107 99 63 ## 226 109 93 61 ## 227 114 102 65 ## 228 90 86 49 ## 229 90 95 46 ## 230 92 89 47 ## 231 56 65 32 ## 232 56 65 31 ## 233 85 94 48 ## 234 90 84 49 ## 235 48 59 27 ## 236 60 70 39 ## 237 90 88 50 ## 238 107 109 67 ## 239 50 65 32 ## 240 54 68 36 ## 241 59 69 29 ## 242 49 63 28 ## 243 84 85 42 ## 244 73 81 41 ## 245 66 74 36 ## 246 62 69 32 ## 247 47 60 32 ## 248 62 72 40 ## 249 45 58 28 ## 250 93 92 49 ## 251 93 96 54 ## 252 39 56 25 ## 253 58 69 34 ## 254 63 74 39 ## 255 63 72 39 ## 256 92 96 54 ## 257 96 98 52 ## 258 44 58 22 ## 259 113 111 73 ## 260 54 64 32 ## 261 89 85 48 ## 262 86 82 46 ## 263 84 82 45 ## 264 95 91 55 ## 265 99 100 61 ## 266 95 91 55 ## 267 67 74 42 ## 268 55 67 38 ## 269 37 50 22 ## 270 43 59 33 ## 271 35 48 20 ## 272 37 52 19 ## 273 44 57 27 ## 274 62 65 25 ## 275 97 89 51 ## 276 90 70 34 ## 277 59 46 12 ## 278 22 23 14 ## 279 59 68 35 ## 280 60 68 26 ## 281 83 87 45 ## 282 105 90 47 ## 283 88 94 49 ## 284 92 100 56 ## 285 64 75 36 ## 286 94 83 44 ## 287 60 58 24 ## 288 46 50 20 ## 289 60 60 27 ## 290 70 66 29 ## 291 48 51 20 ## 292 111 85 56 ## 293 43 45 13 ## 294 43 53 24 ## 295 104 90 49 ## 296 74 65 29 ## 297 32 41 18 ## 298 79 71 35 ## 299 47 59 23 ## 300 63 72 38 ## 301 71 78 46 ## 302 93 79 38 ## 303 62 69 31 ## 304 45 54 21 ## 305 60 67 27 ## 306 62 67 30 ## 307 73 78 44 ## 308 60 69 33 ## 309 53 68 32 ## 310 35 54 19 ## 311 62 72 39 ## 312 48 59 26 ## 313 55 62 31 ## 314 47 60 30 ## 315 45 56 14 ## 316 97 92 55 ## 317 66 81 42 ## 318 63 76 42 ## 319 88 72 40 ## 320 77 86 40 ## 321 47 64 28 ## 322 51 62 30 ## 323 119 117 78 ## 324 54 64 34 ## 325 80 85 53 ## 326 48 58 24 ## 327 52 59 26 ## 328 96 92 54 ## 329 35 51 11 ## 330 31 48 16 ## 331 51 62 21 ## 332 66 72 36 ## 333 74 80 45 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 3954 rows ] #Revisamos los datos head(rasValue) ## Santa_Cruz_2.1 Santa_Cruz_2.2 Santa_Cruz_2.3 ## 1 NA NA NA ## 2 NA NA NA ## 3 NA NA NA ## 4 NA NA NA ## 5 NA NA NA ## 6 NA NA NA tail(rasValue) ## Santa_Cruz_2.1 Santa_Cruz_2.2 Santa_Cruz_2.3 ## 23886 NA NA NA ## 23887 NA NA NA ## 23888 NA NA NA ## 23889 NA NA NA ## 23890 NA NA NA ## 23891 NA NA NA "]
]
